import mysqlx
import csv

# This code was largely generated by ChatGTP from OpenAI (version Jan 30)

def execute(f, session):
    execute_string = ""
    try:
        for line in f:
            # Execute each line as a separate SQL command skipping comments
            if line[0:2] == "--":
                continue
            elif line[0:2] != "--" and line[-1] == ";":
                execute_string += line
                session.sql(execute_string).execute()
                execute_string = ""
            else:
                execute_string += line
    except Exception as e:
        # Rollback the transaction in case of an error
        print("Rolling back the transaction due to an error...")
        session.rollback()

        # Print the error for debugging
        print("An error occurred: {}".format(e))
    finally:
        # Close the connection
        print("Closing the connection...")
        session.close()

# Define a function to refresh a single database
def refresh_database_schema(host, port, user, password):
    # Connect to the database
    print("Connecting to the database...")
    session = mysqlx.get_session(
        {
            "host": host,
            "port": port,
            "user": user,
            "password": password
        }
    )
    flag = False
    print_line = ""

    try:
        print("Connection Successful!")
        # Start a transaction
        print("Starting a transaction...")
        session.start_transaction()

        # Load the SQL drop_order from the file
        print("Loading the SQL drop_order from the file...")
        with open("drop_order.sql", "r") as f:
            print("Executing drop_order.sql...")
            execute(f, session)
        print("     Drop Databases Successful!")

        # Load the SQL schema from the file
        print("Loading the SQL schema from the file...")
        with open("schema.sql", "r") as f:
            print("Executing schema.sql...")
            execute(f, session)
        print("     Rebuild Schema Successful!")

        # Load the SQL schema from the file
        print("Loading the SQL views from the file...")
        with open("views.sql", "r") as f:
            print("Executing views.sql...")
            execute(f, session)
        print("     Rebuild Views Successful!")

        # Load the SQL stored_procedures from the file
        print("Loading the SQL stored_procedures from the file...")
        with open("stored_procedures.sql", "r") as f:
            print("Executing stored_procedures.sql...")
            execute(f, session)
        print("     Rebuild Stored Procedures Successful!")

    except Exception as e:
        # Rollback the transaction in case of an error
        print("Rolling back the transaction due to an error...")
        session.rollback()

        # Print the error for debugging
        print("An error occurred: {}".format(e))
        print("Stopped near: \n{}\n".format(execute_string))
        flag = False

    else:
        # Commit the transaction
        print("Committing the transaction...")
        session.commit()
        print("Execution Successful, Databases are Refreshed!")
        flag = True

    finally:
        # Close the connection
        print("Closing the connection...")
        session.close()

    return flag


def load_data(database_name, host, port, user, password, csv_files, table_drop_order):
        # Connect to the database
    print("Connecting to the database...")
    session = mysqlx.get_session(
        {
            "host": host,
            "port": port,
            "user": user,
            "password": password
        }
    )

    try:
        # Start a transaction
        print("Starting a transaction...")
        session.start_transaction()

        # Drop all tables in the database
        # print("Dropping all tables in the database...")
        # for table_name in table_drop_order:
        #     session.drop_schema(table_name)
        #     print("Dropped table: {}".format(table_name))

        # Load the SQL schema from the file
        print("Loading the SQL schema from the file...")
        with open("schema.sql", "r") as f:
            sql = f.read()
        db.get_session().sql(sql).execute()

        # Load the data from the CSV files in the specified order
        print("Loading the data from the CSV files...")
        csv_files = csv_files
        for csv_file in csv_files:
            print("Loading data from {}...".format(csv_file))
            with open(csv_file, "r") as f:
                reader = csv.reader(f)
                header = next(reader)
                table_name = header[0]
                columns = header[1:]
                table = db.get_table(table_name)
                for row in reader:
                    values = row[1:]
                    table.insert(columns).values(values).execute()

        # Commit the transaction
        print("Committing the transaction...")
        session.commit()
    except Exception as e:
        # Rollback the transaction in case of an error
        print("Rolling back the transaction due to an error...")
        session.rollback()

        # Print the error for debugging
        print("An error occurred: {}".format(e))
    finally:
        # Close the connection
        print("Closing the connection...")
        session.close()


def main():
    print("Reoloading Database...")

    HOST = '192.168.1.42'
    PORT = 33060
    USER = 'client'
    PASSWORD = 'clientPassword5!'


    print("Connection Details.")
    print("     Host: {}".format(HOST))
    print("     Port: {}".format(PORT))
    print("     User: {}".format(USER))
    print("     Password: {}".format(PASSWORD))
    check = input("Are these credentials correct (Y/N)?\n")
    print()
    if check.lower() != "y":
        print("Exiting...")
        exit(0)

    refresh_database_schema(
        HOST,
        PORT,
        USER,
        PASSWORD
    )

    # Define the location of csv data files to reload data
databases = [
    {
        "database": "Inventory",
        "csv_files": [
            "scv_data/Inventory/Inventory - Components.scv"
        ]
    },
    {
        "database": "Organizations",
        "csv_files": [
            "scv_data/Organizations/Organizations db - Organizations.scv",
            "scv_data/Organizations/Organizations db - People.scv",
            "scv_data/Organizations/Organizations db - Users.scv",
            "scv_data/Organizations/Organizations db - Facilities.scv"
        ]
    },
    {
        "database": "Formulas",
        "csv_files": [
            "scv_data/Formulas/Formulas - Formula_Master.scv",
            "scv_data/Formulas/Formulas - Formula_Detail.scv"
        ]
    },
    {
        "database": "Products",
        "csv_files": [
            "scv_data/Products/Products db - Products.scv"
        ]
    },
    {
        "database": "Manufacturing",
        "csv_files": [
        ]
    },
    {
        "database": "Orders",
        "csv_files": [
            "scv_data/Orders/Orders db - Purchase_Orders.scv",
            "scv_data/Orders/Orders db - Purchase_Orders_Detail.scv",
            "scv_data/Orders/Orders db - Lot_Numbers.scv"
        ]
    }
]

if __name__ == "__main__":
    main()