import mysqlx
import re
import os
import json

# This code was largely generated by ChatGTP from OpenAI (version Jan 30)


def execute_from_sql(file_name, session):
    flag = False
    # Start a transaction
    print("Starting a transaction...")
    session.start_transaction()
    print("Loading the '{}' file...".format(file_name))
    with open(file_name, "r") as f:
        print("Executing '{}' file...".format(file_name))
        try:
            # Execute the SQL statement
            statement = ""
            for line in f:
                if re.match(r'--', line):
                    continue
                if not re.search(r';$', line):
                    statement = statement + line
                else:
                    statement = statement + line
                    # print("Executing the SQL statement...")
                    # print("     ", statement[:60].strip(), "...")
                    session.sql(statement).execute()
                    statement = ""
        except Exception as e:
            # Rollback the transaction in case of an error
            print("Rolling back the transaction due to an error...")
            session.rollback()

            # Print the error for debugging
            print("An error occurred: {}".format(e))
            print("Stopped near: \n{}\n".format(statement))

        else:
            # Commit the transaction
            print("Execution Successful!")
            session.commit()
            print("Committing the transaction...")
            flag = True

    return flag

# Define a function to refresh a single database
def refresh_database_schema(session):
    flag = True

    if flag:
        # Load the SQL drop_order from the file
        flag = execute_from_sql("drop_order.sql", session)

    if flag:
        # Load the SQL schema from the file
        flag = execute_from_sql("schema.sql", session)

    if flag:
        # Load the SQL schema from the file
        flag = execute_from_sql("views.sql", session)

    # if flag:
    #     # Load the SQL stored_procedures from the file
    #     flag = execute_from_sql("stored_procedures.sql", session)

    return flag

def load_csv_to_table(file_path, table_name, session, database_name):
    try:
        print(f"Loading {file_path} into {table_name} table...")
        session.sql(f"USE {database_name}").execute() # Add this line to select the database
        session.sql(f"LOAD DATA INFILE '{file_path}' INTO TABLE {table_name} FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS;").execute()
        print("Loading successful!")
    except Exception as e:
        print(f"Loading failed due to error: {e}")


def split_csv_with_quotes(csv_string):
    items = []
    quote_open = False
    current_item = ""
    for char in csv_string:
        if char == ',' and not quote_open:
            items.append(current_item.strip())
            current_item = ""
        elif char == '"':
            quote_open = not quote_open
            current_item += char
        else:
            current_item += char
    items.append(current_item.strip())
    return items

def main():

    print("Reoloading Database...")

    # HOST = '192.168.1.42'
    HOST = '64.255.82.22'
    PORT = 33060
    USER = 'client'
    PASSWORD = 'clientPassword5!'


    print("Connection Details.")
    print("     Host: {}".format(HOST))
    print("     Port: {}".format(PORT))
    print("     User: {}".format(USER))
    print("     Password: {}".format(PASSWORD))
    check = input("Are these credentials correct (Y/N)?\n")
    print()
    if check.lower() != "y":
        print("Exiting...")
        exit(0)

    # Connect to the database
    print("Connecting to the database...")
    session = mysqlx.get_session(
        {
            "host": HOST,
            "port": PORT,
            "user": USER,
            "password": PASSWORD
        }
    )
    print("Connection Successful!")

    flag = refresh_database_schema(session)

    # Define the location of csv data files to reload data
    databases = [
        {
            "database": "Organizations",
            "csv_files": [
                {
                    "file":"scv_data/Organizations/Organizations db - Organizations.csv",
                    "table_name": "Organizations"
                },
                {
                    "file":"scv_data/Organizations/Organizations db - People.csv",
                    "table_name": "People"
                },
                {
                    "file":"scv_data/Organizations/Organizations db - Users.csv",
                    "table_name": "Users"
                },
                {
                    "file":"scv_data/Organizations/Organizations db - Facilities.csv",
                    "table_name": "Facilities"
                }
            ]
        },
        {
            "database": "Inventory",
            "csv_files": [
                {
                    "file":"scv_data/Inventory/Inventory - Components.csv",
                    "table_name": "Components"
                }
            ]
        },
        {
            "database": "Products",
            "csv_files": [
                {
                    "file":"scv_data/Products/Products db - Product_Master.csv",
                    "table_name": "Product_Master"
                }
            ]
        },
        {
            "database": "Manufacturing",
            "csv_files": [
            ]
        },
        {
            "database": "Orders",
            "csv_files": [
                {
                    "file":"scv_data/Orders/Orders db - Purchase_Orders.csv",
                    "table_name": "Purchase_Orders"
                },
                {
                    "file":"scv_data/Orders/Orders db - Purchase_Orders_Detail.csv",
                    "table_name": "Purchase_Orders_Detail"
                },
                {
                    "file":"scv_data/Orders/Orders db - Lot_Numbers.csv",
                    "table_name": "Lot_Numbers"
                }
            ]
        },
        {
            "database": "Formulas",
            "csv_files": [
                {
                    "file":"scv_data/Formulas/Formulas - Formula_Master.csv",
                    "table_name": "Formula_Master"
                },
                {
                    "file":"scv_data/Formulas/Formulas - Formula_Detail.csv",
                    "table_name": "Formula_Details"
                }
            ]
        }
    ]

    # Loop through each database and CSV file and insert the data
    for database in databases:
        print("{} data loading...".format(db_name))
        if database["csv_files"]:
            session.start_transaction()
            db_name = database["database"]
            db = session.get_schema(db_name)
            for csv_file in database["csv_files"]:
                table_name = csv_file["table_name"]
                print("Loading CSV for {} file...".format(table_name))
                table = db.get_table(table_name)
                csv_data = open(os.getcwd() + "/" + csv_file["file"], "r")
                header = csv_data.readline().strip().split(",")
                print("Inserting data into the '{}' table...".format(table_name))
                # print("Headers: ", header)
                for line in csv_data:
                    values = split_csv_with_quotes(line.strip())
                    print(values)
                    for v in range(len(values)):
                        if "_id" in values[v]:
                            values[v] = json.dumps(values[v].replace('""',''))
                        if values[v] == 'NULL':
                            values[v] = None
                        if values[v] == '':
                            values[v] = '01110'
                    print("Values: ", values)
                    table.insert(header).values(values).execute()
                csv_data.close()
                print("CSV for {} file loaded successfully!".format(table_name))
            print("{} data successfully loaded!".format(db_name))
            session.commit()
        else:
            print("No CSV files found for {}".format(db_name))

    # Close the connection to the database
    print("Closeing the connection to the database...")
    session.close()

if __name__ == "__main__":
    main()